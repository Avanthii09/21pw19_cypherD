{"ast":null,"code":"import { ethers } from 'ethers';\nclass WalletService {\n  constructor() {\n    this.wallet = null;\n    this.mnemonic = null;\n  }\n\n  // Generate a new wallet\n  generateWallet() {\n    const mnemonic = ethers.Mnemonic.entropyToPhrase(ethers.randomBytes(16));\n    const wallet = ethers.Wallet.fromPhrase(mnemonic);\n    this.mnemonic = mnemonic;\n    this.wallet = wallet;\n    return {\n      address: wallet.address,\n      mnemonic: mnemonic,\n      privateKey: wallet.privateKey\n    };\n  }\n\n  // Import wallet from mnemonic\n  importWallet(mnemonic) {\n    try {\n      const wallet = ethers.Wallet.fromPhrase(mnemonic);\n      this.mnemonic = mnemonic;\n      this.wallet = wallet;\n      return {\n        address: wallet.address,\n        mnemonic: mnemonic,\n        privateKey: wallet.privateKey\n      };\n    } catch (error) {\n      throw new Error('Invalid mnemonic phrase');\n    }\n  }\n\n  // Sign a message\n  async signMessage(message) {\n    if (!this.wallet) {\n      throw new Error('No wallet loaded');\n    }\n    try {\n      const signature = await this.wallet.signMessage(message);\n      return signature;\n    } catch (error) {\n      throw new Error('Failed to sign message');\n    }\n  }\n\n  // Get current wallet info\n  getWalletInfo() {\n    if (!this.wallet) {\n      return null;\n    }\n    return {\n      address: this.wallet.address,\n      mnemonic: this.mnemonic\n    };\n  }\n\n  // Save wallet to localStorage\n  saveWallet() {\n    if (!this.wallet || !this.mnemonic) {\n      throw new Error('No wallet to save');\n    }\n    const walletData = {\n      address: this.wallet.address,\n      mnemonic: this.mnemonic\n    };\n    localStorage.setItem('mockWallet', JSON.stringify(walletData));\n  }\n\n  // Load wallet from localStorage\n  loadWallet() {\n    try {\n      const walletData = localStorage.getItem('mockWallet');\n      if (!walletData) {\n        return null;\n      }\n      const parsed = JSON.parse(walletData);\n      return this.importWallet(parsed.mnemonic);\n    } catch (error) {\n      console.error('Failed to load wallet:', error);\n      return null;\n    }\n  }\n\n  // Clear wallet from localStorage\n  clearWallet() {\n    localStorage.removeItem('mockWallet');\n    this.wallet = null;\n    this.mnemonic = null;\n  }\n\n  // Validate Ethereum address\n  isValidAddress(address) {\n    return ethers.isAddress(address);\n  }\n\n  // Format ETH amount\n  formatEth(weiAmount) {\n    return ethers.formatEther(weiAmount);\n  }\n\n  // Parse ETH amount to wei\n  parseEth(ethAmount) {\n    return ethers.parseEther(ethAmount.toString());\n  }\n}\nconst walletService = new WalletService();\nexport default walletService;","map":{"version":3,"names":["ethers","WalletService","constructor","wallet","mnemonic","generateWallet","Mnemonic","entropyToPhrase","randomBytes","Wallet","fromPhrase","address","privateKey","importWallet","error","Error","signMessage","message","signature","getWalletInfo","saveWallet","walletData","localStorage","setItem","JSON","stringify","loadWallet","getItem","parsed","parse","console","clearWallet","removeItem","isValidAddress","isAddress","formatEth","weiAmount","formatEther","parseEth","ethAmount","parseEther","toString","walletService"],"sources":["/Users/avanthikarammohan/Documents/mock-web3-wallet/frontend/src/services/wallet.js"],"sourcesContent":["import { ethers } from 'ethers';\r\n\r\nclass WalletService {\r\n  constructor() {\r\n    this.wallet = null;\r\n    this.mnemonic = null;\r\n  }\r\n\r\n  // Generate a new wallet\r\n  generateWallet() {\r\n    const mnemonic = ethers.Mnemonic.entropyToPhrase(ethers.randomBytes(16));\r\n    const wallet = ethers.Wallet.fromPhrase(mnemonic);\r\n    \r\n    this.mnemonic = mnemonic;\r\n    this.wallet = wallet;\r\n    \r\n    return {\r\n      address: wallet.address,\r\n      mnemonic: mnemonic,\r\n      privateKey: wallet.privateKey\r\n    };\r\n  }\r\n\r\n  // Import wallet from mnemonic\r\n  importWallet(mnemonic) {\r\n    try {\r\n      const wallet = ethers.Wallet.fromPhrase(mnemonic);\r\n      \r\n      this.mnemonic = mnemonic;\r\n      this.wallet = wallet;\r\n      \r\n      return {\r\n        address: wallet.address,\r\n        mnemonic: mnemonic,\r\n        privateKey: wallet.privateKey\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Invalid mnemonic phrase');\r\n    }\r\n  }\r\n\r\n  // Sign a message\r\n  async signMessage(message) {\r\n    if (!this.wallet) {\r\n      throw new Error('No wallet loaded');\r\n    }\r\n    \r\n    try {\r\n      const signature = await this.wallet.signMessage(message);\r\n      return signature;\r\n    } catch (error) {\r\n      throw new Error('Failed to sign message');\r\n    }\r\n  }\r\n\r\n  // Get current wallet info\r\n  getWalletInfo() {\r\n    if (!this.wallet) {\r\n      return null;\r\n    }\r\n    \r\n    return {\r\n      address: this.wallet.address,\r\n      mnemonic: this.mnemonic\r\n    };\r\n  }\r\n\r\n  // Save wallet to localStorage\r\n  saveWallet() {\r\n    if (!this.wallet || !this.mnemonic) {\r\n      throw new Error('No wallet to save');\r\n    }\r\n    \r\n    const walletData = {\r\n      address: this.wallet.address,\r\n      mnemonic: this.mnemonic\r\n    };\r\n    \r\n    localStorage.setItem('mockWallet', JSON.stringify(walletData));\r\n  }\r\n\r\n  // Load wallet from localStorage\r\n  loadWallet() {\r\n    try {\r\n      const walletData = localStorage.getItem('mockWallet');\r\n      if (!walletData) {\r\n        return null;\r\n      }\r\n      \r\n      const parsed = JSON.parse(walletData);\r\n      return this.importWallet(parsed.mnemonic);\r\n    } catch (error) {\r\n      console.error('Failed to load wallet:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Clear wallet from localStorage\r\n  clearWallet() {\r\n    localStorage.removeItem('mockWallet');\r\n    this.wallet = null;\r\n    this.mnemonic = null;\r\n  }\r\n\r\n  // Validate Ethereum address\r\n  isValidAddress(address) {\r\n    return ethers.isAddress(address);\r\n  }\r\n\r\n  // Format ETH amount\r\n  formatEth(weiAmount) {\r\n    return ethers.formatEther(weiAmount);\r\n  }\r\n\r\n  // Parse ETH amount to wei\r\n  parseEth(ethAmount) {\r\n    return ethers.parseEther(ethAmount.toString());\r\n  }\r\n}\r\n\r\nconst walletService = new WalletService();\r\nexport default walletService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}